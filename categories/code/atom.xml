<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Lucas' Thoughts]]></title>
  <link href="http://www.eagleton.org/categories/code/atom.xml" rel="self"/>
  <link href="http://www.eagleton.org/"/>
  <updated>2013-06-09T22:29:37+10:00</updated>
  <id>http://www.eagleton.org/</id>
  <author>
    <name><![CDATA[MuzzleFork]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using git's post-receive hooks to deploy code]]></title>
    <link href="http://www.eagleton.org/2013/06/using-gits-post-receive-hooks-to-deploy-code/"/>
    <updated>2013-06-09T13:24:00+10:00</updated>
    <id>http://www.eagleton.org/2013/06/using-gits-post-receive-hooks-to-deploy-code</id>
    <content type="html"><![CDATA[<p>I've recently started self-hosting some sites on some cheap, cool hosting provided by <a href="https://www.digitalocean.com/?refcode=1d72a90eb581">Digital Ocean</a>. On one of their VPSs, I've set up some bare git repositories and made some git hooks to automate deployment of sites to that server.<!-- more --></p>

<p>This information isn't limited to only working on Digital Ocean, but my walk-through is based on that environment - using their LAMP stack image based on Ubuntu 12.04 using an SSH key (makes life so much easier :))</p>

<p>This setup uses Apache and some virtual hosts to handle each site. The default setup in Ubuntu for apache involves 2 folders - <code>/etc/apache2/sites-available</code> (where you can put a virtual host directive) and <code>/etc/apache2/sites-enabled</code> (where you symlink files from the sites-available folder in order to enable them). Using the <code>sites-available</code>/<code>sites-enabled</code> combo allows you to disable sites without removing them. This functionality isn't required here since we're going to use git to version control and getting old versions out of config is easy.</p>

<h2>Set up git repository for the virtual hosts</h2>

<p>I'm using <code>/var/repos</code> for all of my repos. You're welcome to use any other path you see fit.
<code>bash
mkdir -p /var/repos/virtualhosts.git
cd /var/repos/virtualhosts.git
git init --bare
</code></p>

<p>This creates a bare repository (doesn't include a working folder) ready for use.</p>

<p>While you're in there, modify the post-receive hook (my favourite editor is vim = <code>vim hooks/post-receive</code>)
Put the following code in there
``` bash
GIT_WORK_TREE=/etc/apache2/sites-available git checkout -f</p>

<h1>a2dissite all files in /etc/apache2/sites-enabled</h1>

<p>cd /etc/apache2/sites-enabled
for f in * ; do a2dissite $f; done</p>

<h1>ensite the ones that are present now in /etc/apache2/sites-available</h1>

<p>cd /etc/apache2/sites-available
for f in * ; do a2ensite $f; done</p>

<p>service apache2 reload
<code>
Then you'll have to give it execute permission
</code> bash
chmod +x hooks/post-receive
```</p>

<p>This will:</p>

<ol>
<li>Check out the files in the repo to <code>/etc/apache2/sites-available</code></li>
<li>Disable all the existing sites that are linked</li>
<li>Enable all the sites that are present in <code>/etc/apache2/sites-available</code>.</li>
<li>Tell Apache to reload its configuration</li>
</ol>


<p>Now, on your development machine, you'll need to set this up as a remote and start pushing virtual host configurations to it.
<code>bash
git clone ssh://user@host-name/var/repos/virtualhosts.git
</code></p>

<p>You're now ready to start adding virtual host directives into that repo. When you push to <code>origin</code>, it'll restart Apache with the updated config.</p>

<p>Here's a sample - this is modified from the default:
``` apacheconf
<VirtualHost *:80></p>

<pre><code>ServerAdmin you@host.com

DocumentRoot /var/sites/&lt;some-domain-name&gt;
ServerName &lt;some-domain-name&gt;
ServerAlias www.&lt;some-domain-name&gt;

SetEnv db.name xxxxx
SetEnv db.user xxxxx
SetEnv db.password xxxxx
SetEnv db.host localhost

&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride None
&lt;/Directory&gt;
&lt;Directory /var/&gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    allow from all
&lt;/Directory&gt;

ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
&lt;Directory "/usr/lib/cgi-bin"&gt;
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Order allow,deny
    Allow from all
&lt;/Directory&gt;

ErrorLog ${APACHE_LOG_DIR}/error.log

# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
LogLevel warn

CustomLog ${APACHE_LOG_DIR}/access.log combined

Alias /doc/ "/usr/share/doc/"
&lt;Directory "/usr/share/doc/"&gt;
    Options Indexes MultiViews FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
    Allow from 127.0.0.0/255.0.0.0 ::1/128
&lt;/Directory&gt;
</code></pre>

<p></VirtualHost>
```</p>

<h2>Set up git repo for each site</h2>

<p>So, we can see that virtual hosts are added to Apache whenever you add a new config, but those virtual host configurations are pointing to locations that don't yet exist. Let's fix that now, back to your remote server.</p>

<p><code>bash
mkdir -p /var/sites/&lt;some-domain-name&gt;
mkdir -p /var/repos/&lt;some-domain-name&gt;.git
cd /var/repos/&lt;some-domain-name&gt;.git
git init --bare
</code></p>

<p>And to have this git repo deploy whenever it is pushed to, <code>vim hooks/post-deploy</code>
``` bash</p>

<h1>!/bin/sh</h1>

<p>GIT_WORK_TREE=/var/sites/<some-domain-name> git checkout -f master
<code>
Don't forget to make it executable:
</code> bash
chmod +x hooks/post-deploy
```</p>

<p>It's ready to go! To check it out locally, you can:
<code>bash
git clone ssh://user@host-name/var/repos/&lt;some-domain-name&gt;.git
</code>
or you could add it as a remote for an existing repository
<code>bash
git remote add &lt;repo-name&gt; ssh://user@host-name/var/repos/&lt;some-domain-name&gt;.git
</code></p>

<p>Push to that remote whenever you're ready for your changes to go live.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop working on shit code]]></title>
    <link href="http://www.eagleton.org/2011/07/stop-working-on-shit-code/"/>
    <updated>2011-07-26T00:00:00+10:00</updated>
    <id>http://www.eagleton.org/2011/07/stop-working-on-shit-code</id>
    <content type="html"><![CDATA[<p>Do you work on old, shitty code? Does it stink? Each time you have to work on that same file that drives you nuts, does it make you question your sanity?</p>

<p>In my day job, if there's something that'll bring tears to a developer's eyes, it's being given a story to work on that involves touching a 6~7 year old file called <code>sales.php</code>. This file is a monstrous 7000+ lines long and is a gigantic state machine that is confusing and highly prone to malfunction. It also loosely forms the "C" and the "V" of a fairly broken MVC structure. To make matters worse, over the years, there have been ~10 different developers 'work' on it and it's a delicate debacle of different coding styles, motivations and business desires.<!--more--></p>

<p>Every developer who has ever had the misfortune of working with this file (and the rest of the broken MVC) has always cried out that the whole system needs rewriting (and rightly so), but it's hard to sell that to the business when it'll a) take ages, b) probably take longer than that, c) in the meantime, they get no new features and d) will, once completed, probably be just as bad as the old one (and hey presto, it's now outdated too). I was talking to a colleague about this the other week and came to a realisation about it.</p>

<p><strong>Stop working on shit code! We're better than that.</strong> After working with this software for 3 years, I can't say that I'm proud of the work I've done there (my colleague was 6 years - he couldn't either) - I've just continued the legacy of bad code because the barrier to change was too high. If you can't be proud of your work, then when you look back on it later, you'll realise you've wasted your time (and your company's). As of that day, my new work ethos is centred around pride.</p>

<ul>
    <li>As I commit each changeset, I want to be able to say I'm proud of the code I'm committing.</li>
    <li>I respect my colleagues as professionals and friends. When they peer review my work, I don't want them to think "Wow, what a lame way to do that" or "wouldn't it be great if he did 'xyz'?". If they do think I've done something poorly, I <strong>want</strong> them to call me out on it. If they know some smarter way to do it, teach me. If I've left a debugging line in or a dodgy comment, make me fix it.</li>
    <li>Conversely, when I peer review my colleague's work, I want to know that what I'm seeing is their best solution to the problem and that they are proud of the work they're showing me. I will tell them if I think it stinks and explain why.</li>
</ul>


<p>I'm not saying each commit has to revolutionise the world or rewrite the whole system, but <strong>the state of the system should 'smell' better after each commit than before.</strong> Not smell the same, and definitely not smell worse. Working on some new calculation inside a 7000 line class? Refactor that calculation out in a sensible way. Suddenly that stinky old class is only 6900 lines of crap. I'd say that smells a little better.</p>

<p>Go home at the end of the day being able to say "<strong>I'm proud of what I did here</strong>".</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wiki Class]]></title>
    <link href="http://www.eagleton.org/2010/06/wiki-class/"/>
    <updated>2010-06-08T21:44:00+10:00</updated>
    <id>http://www.eagleton.org/2010/06/wiki-class</id>
    <content type="html"><![CDATA[<p>Ages ago, I wrote a simple class to enable some scripts to update our wiki. A friend asked for a copy, so here it is:<!--more-->
<div><script src='https://gist.github.com/1598093.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
